# Generated by Django 4.2.4 on 2023-08-12 11:26

import auth2.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'Pick another username.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9]+$', 'Enter a valid username. This value may contain only letters, numbers ', 'invalid')], verbose_name='username')),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('email', models.EmailField(error_messages={'invalid': 'Provide valid email.', 'unique': 'Email taken.'}, max_length=254, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_email', message='Email must has to be valid.', regex="^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$")])),
                ('email_verified', models.BooleanField(default=False)),
                ('bio', models.CharField(blank=True, max_length=100, null=True)),
                ('profilePicUrl', models.CharField(blank=True, max_length=150, null=True)),
                ('synced_contacts', models.BooleanField(default=False)),
                ('analysis_unlocked_at', models.DateTimeField(blank=True, null=True)),
                ('analysis_unlock_duration', models.PositiveSmallIntegerField(blank=True, default=21)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('marks', models.ManyToManyField(blank=True, related_name='marked_by', to=settings.AUTH_USER_MODEL)),
                ('reachers', models.ManyToManyField(blank=True, related_name='reached_profiles', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ProfilePoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip', models.GenericIPAddressField()),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('updated_at', models.DateField(auto_now=True)),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='point', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RawSnap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snap_type', models.CharField(max_length=45)),
                ('snap_key', models.CharField(max_length=20)),
                ('snap_data', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Social',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('socialMedia', models.CharField(max_length=15)),
                ('handleId', models.CharField(max_length=50)),
                ('highlighted', models.BooleanField(default=False)),
                ('access_token', models.TextField(blank=True, max_length=500, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('refresh_token', models.TextField(blank=True, max_length=500, null=True)),
                ('relogin_required', models.BooleanField(default=False)),
                ('profile_link', models.URLField(blank=True, max_length=150, null=True)),
                ('profilePicUrl', models.CharField(blank=True, max_length=500, null=True)),
                ('name', models.CharField(max_length=100)),
                ('last_updated', models.DateTimeField(auto_now_add=True, null=True)),
                ('hits', models.ManyToManyField(blank=True, to='auth2.profilepoint')),
                ('profile', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='socials', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Preference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notifications', models.JSONField(default={'fcm_token': None, 'general': True, 'new_follower': True, 'social_tap': True}, validators=[auth2.models.validate_notifications])),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='prefs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Phone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_name', models.CharField(blank=True, max_length=50, null=True)),
                ('number', models.CharField(error_messages={'invalid_phone': 'Provide proper phone number format!', 'unique': 'Phone number registered already!'}, max_length=16, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_phone', message='Phone number must be valid.', regex='^\\+\\d{2,3}\\s\\d{5}\\-\\d{5}$')])),
                ('number_verified', models.BooleanField(default=False)),
                ('target_profile', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='phone', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AnalyticProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('impressions', models.PositiveBigIntegerField(default=0)),
                ('impressions_timestamps', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), blank=True, default=list, null=True, size=None)),
                ('predicted_tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20), blank=True, default=list, null=True, size=None)),
                ('profile_views_timestamps', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), blank=True, default=list, null=True, size=None)),
                ('reports_timestamps', django.contrib.postgres.fields.ArrayField(base_field=models.DateTimeField(), blank=True, default=list, null=True, size=None)),
                ('contacts', models.ManyToManyField(related_name='contact_in', to='auth2.phone')),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to=settings.AUTH_USER_MODEL)),
                ('profile_views', models.ManyToManyField(related_name='viewed', to='auth2.profilepoint')),
                ('reports', models.ManyToManyField(to='auth2.profilepoint')),
                ('self_point', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='analytics', to='auth2.profilepoint')),
            ],
        ),
    ]
